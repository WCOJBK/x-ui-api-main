name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - {goos: "linux", goarch: "amd64"}
          - {goos: "linux", goarch: "386"}
          - {goos: "linux", goarch: "arm64"}
          - {goos: "linux", goarch: "arm", goarm: "7"}
          - {goos: "linux", goarch: "arm", goarm: "6"}  
          - {goos: "linux", goarch: "arm", goarm: "5"}
          - {goos: "linux", goarch: "s390x"}
          - {goos: "linux", goarch: "mips64"}
          - {goos: "linux", goarch: "mips64le"}
          - {goos: "linux", goarch: "mips"}
          - {goos: "linux", goarch: "mipsle"}
          - {goos: "freebsd", goarch: "amd64"}
          - {goos: "freebsd", goarch: "386"}
          - {goos: "freebsd", goarch: "arm64"}
          - {goos: "freebsd", goarch: "arm", goarm: "7"}
          - {goos: "darwin", goarch: "amd64"}
          - {goos: "darwin", goarch: "arm64"}
          - {goos: "windows", goarch: "amd64"}
          - {goos: "windows", goarch: "386"}
          - {goos: "windows", goarch: "arm64"}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        echo "BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 0
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        BUILD_TIME="${{ steps.version.outputs.BUILD_TIME }}"
        GIT_COMMIT=${{ steps.version.outputs.GIT_COMMIT }}
        
        LDFLAGS="-s -w -X main.version=${VERSION} -X 'main.buildTime=${BUILD_TIME}' -X main.gitCommit=${GIT_COMMIT}"
        
        # Build name
        BINARY_NAME="x-ui"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="x-ui.exe"
        fi
        
        # Directory name  
        if [ -n "$GOARM" ]; then
          DIR_NAME="x-ui-${GOOS}-armv${GOARM}"
        else
          DIR_NAME="x-ui-${GOOS}-${GOARCH}"
        fi
        
        # Build
        go build -ldflags "$LDFLAGS" -o ${DIR_NAME}/${BINARY_NAME} main.go
        
        # Copy additional files
        cp x-ui.sh ${DIR_NAME}/
        cp x-ui.service ${DIR_NAME}/
        cp LICENSE ${DIR_NAME}/
        cp README.md ${DIR_NAME}/
        mkdir -p ${DIR_NAME}/web
        cp -r web/html ${DIR_NAME}/web/
        cp -r web/assets ${DIR_NAME}/web/
        
        # Create build info
        cat > ${DIR_NAME}/BUILD_INFO.txt << EOF
        3X-UI Enhanced API ${VERSION}
        ============================
        
        Platform: ${GOOS}/${GOARCH}${GOARM:+v${GOARM}}
        Version: ${VERSION}
        Build Time: ${BUILD_TIME}
        Git Commit: ${GIT_COMMIT}
        
        Installation Instructions:
        1. Extract to /usr/local/
        2. chmod +x x-ui x-ui.sh
        3. cp x-ui.service /etc/systemd/system/
        4. systemctl daemon-reload && systemctl enable x-ui && systemctl start x-ui
        
        Documentation: https://github.com/WCOJBK/x-ui-api-main
        EOF
        
        # Create archive
        if [ "$GOOS" = "windows" ]; then
          zip -r ${DIR_NAME}.zip ${DIR_NAME}/
        else
          tar -czf ${DIR_NAME}.tar.gz ${DIR_NAME}/
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}
        path: |
          *.tar.gz
          *.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Prepare release files
      run: |
        mkdir -p release_files
        find . -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release_files/
        ls -la release_files/

    - name: Generate release notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        # 🚀 3X-UI Enhanced API ${{ steps.version.outputs.VERSION }}
        
        > **Complete API Enhancement with 49 Endpoints - Production Ready**
        
        ## 🆕 **Key Features**
        
        ### 📊 **API Enhancement** 
        - **Total Endpoints**: 49 (vs 19 in original) - **+157% increase**
        - **New Modules**: Outbound (6), Routing (5), Subscription (5)
        - **Advanced Features**: Custom subscriptions, traffic limits, expiry management
        
        ### 🔧 **Technical Improvements**
        - ✅ Complete source code enhancement
        - ✅ Multi-platform binary releases (21 platforms)
        - ✅ Comprehensive API documentation  
        - ✅ Docker support & auto-installation scripts
        - ✅ Multi-language README (EN, CN, ES, FA, RU)
        
        ## 📥 **Quick Installation**
        
        ### Automatic Installation (Recommended)
        ```bash
        bash <(curl -Ls https://raw.githubusercontent.com/WCOJBK/x-ui-api-main/main/install_enhanced.sh)
        ```
        
        ### Manual Installation
        1. Download the appropriate binary for your platform below
        2. Extract and follow the BUILD_INFO.txt instructions
        
        ## 🆕 **New API Endpoints**
        
        **📡 Outbound Management (6 endpoints)**
        - List, Add, Delete, Update outbounds
        - Traffic management and reset
        
        **🛣️ Routing Management (5 endpoints)**  
        - Dynamic routing rule management
        - Complete routing configuration control
        
        **📰 Subscription Management (5 endpoints)**
        - Subscription settings and URL generation
        - Enable/disable subscription features
        
        **👥 Advanced Client Features**
        - Custom subscription addresses
        - Traffic limits and expiry times
        - Enhanced client management
        
        ## 📚 **Documentation**
        - [Complete API Documentation](https://github.com/WCOJBK/x-ui-api-main/blob/main/COMPLETE_API_DOCUMENTATION.md)
        - [Installation Guide](https://github.com/WCOJBK/x-ui-api-main/blob/main/UPGRADE_TO_ENHANCED_API.md)
        - [API Quick Reference](https://github.com/WCOJBK/x-ui-api-main/blob/main/API_QUICK_REFERENCE.md)
        
        ## 🔄 **Upgrade from Original 3X-UI**
        ```bash
        bash <(curl -Ls https://raw.githubusercontent.com/WCOJBK/x-ui-api-main/main/compile_upgrade.sh)
        ```
        
        ---
        
        **📦 Platform Support**: Linux (AMD64, ARM64, ARM v5/v6/v7, 386, s390x, MIPS), FreeBSD, macOS, Windows
        
        **🙏 Acknowledgments**: MHSanaei (original creator), alireza0 (contributor), WCOJBK (enhanced API maintainer)
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: "3X-UI Enhanced API ${{ steps.version.outputs.VERSION }}"
        body_path: RELEASE_NOTES.md
        files: release_files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}